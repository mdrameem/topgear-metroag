package topgear.metroag.xfile;import java.io.File;import java.io.IOException;import java.security.Timestamp;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import com.fasterxml.jackson.core.exc.StreamReadException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.DatabindException;import com.fasterxml.jackson.databind.ObjectMapper;import topgear.metroag.xfile.bean.Status;import topgear.metroag.xfile.bean.Xfile;/** * Requirements: *  * 1. Read the attached json file and display its content. *  * 2. List all the interfaces' names sorted by their priority. *  * 3. List all the active interfaces' names for which the interval includes the * current timestamp. *  * E. g.: For 15:00, you should list interface_1 and interface_3 *  * 4. Build the following method which takes the number of transferred files and * the time interval in which they were transferred and list all the active * interfaces along with their status (success or error) if the relation is met * or not. *  * void checkTransfer (int noOfFiles, String from, String to) *  * E.g.: checkTransfer (4, "13:00", "15:00") -> interface_1 - error, interface_2 * - error, interface_3 - success *  * Build the unit test for the previous method. * *  */public class App {	private List<Xfile> fileList = new ArrayList<Xfile>();	public List<Xfile> getFileList() {		return fileList;	}	public App() {		this.fileList = mapExpectedJson();	}	public ArrayList<Xfile> mapExpectedJson() {		ObjectMapper objectMapper = new ObjectMapper();		try {			fileList = objectMapper.readValue(App.class.getClassLoader().getResourceAsStream("expected.json"),					new TypeReference<List<Xfile>>() {					});		} catch (StreamReadException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (DatabindException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return (ArrayList<Xfile>) fileList;	}	public void displayFiles() {		for (Xfile xfile : fileList) {			System.out.println(xfile);		}	}	public void sortByPriority() {		Collections.sort(fileList, Comparator.comparingInt(Xfile::getPriority));	}	public void listAllFilesIncludesCurrentTimeStamp() {		LocalTime timeNow = LocalTime.now();		for (Xfile xfile : fileList) {			LocalTime from = LocalTime.parse(xfile.getFrom());			LocalTime to = LocalTime.parse(xfile.getTo());			if (timeNow.isAfter(from) && timeNow.isBefore(to))				System.out.println(xfile);		}	}	public void checkTransfer(int noOfFiles, String from, String to) {		LocalTime fromTime = LocalTime.parse(from);		LocalTime toTime = LocalTime.parse(to);		for (Xfile xfile : fileList) {			boolean eligible = false;			Status status = Status.ERROR;			if (xfile.isActive()) {				eligible = true;				if ((LocalTime.parse(xfile.getFrom()).compareTo(fromTime)) <= 0						&& (LocalTime.parse(xfile.getTo()).compareTo(toTime)) >= 0) {					if ((xfile.getRelation().equalsIgnoreCase("==") && xfile.getExpected() == noOfFiles)) {						status = Status.SUCCESS;					} else if (xfile.getRelation().equalsIgnoreCase("<=") && noOfFiles <= xfile.getExpected()) {						status = Status.SUCCESS;					} else if (xfile.getRelation().equalsIgnoreCase(">=") && noOfFiles >= xfile.getExpected()) {						status = Status.SUCCESS;					} else {						status = Status.ERROR;					}				} else {					status = Status.ERROR;				}			} else {				eligible = false;			}			if (eligible) {				System.out.println(xfile.getFileInterface().getInterfaceName() + " - " + status);			}		}	}	public static void main(String[] args) {		ObjectMapper objectMapper = new ObjectMapper();		try {			// Xfile xfile = objectMapper.readValue(new File("expected.json"),Xfile.class);			List<Xfile> fileList = objectMapper.readValue(					App.class.getClassLoader().getResourceAsStream("expected.json"), new TypeReference<List<Xfile>>() {					});			App app = new App();			// active = true, relation is met or not			System.out					.println(LocalTime.now().compareTo(LocalTime.parse("15:20:30", DateTimeFormatter.ISO_LOCAL_TIME)));			System.out.println(Status.SUCCESS);			System.out.println("***LIST OF FILES***");			app.checkTransfer(4, "13:00", "15:00");			app.displayFiles();			app.sortByPriority();		} catch (StreamReadException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (DatabindException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}}